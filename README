OVERVIEW

This code can calculate the Random Phase Approximation (RPA), at both first
and second order (Extended RPA).  It can perform this calculation given
an effective interaction, and a single paraticle modelspace, which can be
mean-field or fragmented (which yields "Dressed" (E)RPA or D(E)RPA).


COPYRIGHT

This code is distributed under the GNU General Purpose License version 3.  See
LICENSE for more details.


MODIFICATIONS AND CONTRIBUTIONS

If you make a useful modification to the code, please, submit it to me and I
will try to update the repository so that others may share the fruits of your
labor!


COMPILATION

To compile the code, you will need the following libraries:

lapack (the shared libraries, not the source)
boost (www.boost.org)
boost numeric bindings (for lapack)
google testing suite (gtest)

As of this writing, the boost numeric bindings are not yet a part of boost, but
are being integrated into it.

To compile the code and run some basic tests on it, simply type:
./bootstrap
make check

NOTE: on OSX you will need to change libtoolize to glibtoolize in the bootstrap
script.

The following binaries should magically appear in the project's bin directory:
drpa
plot_eigenvalues - plots the ERPA eigenvalues as a function of energy
erpa

They are all run with the form:
<command> --config example_config.cfg

The config files are simple -- they mostly contain input and output file names.


INPUTS

This code requires both a model space and an interaction as inputs.  Samples
are provided, but you are on your own for generating more realistic
interactions and model spaces.


BUGS

The ERPA eigenvectors are not properly normalized.  If you decide to use this
code and write the normalization (it shouldn't be difficult), please let me
know and I will include it.

If you find a bug, please write a unit test that reproduces the bug.  Please,
try to make sure that the unit test requires as little outside input as
possible (it shouldn't be a full calculation).

Enjoy,
Mark Burnett
March 2009
